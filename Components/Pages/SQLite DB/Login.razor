@page "/login"
@using System.ComponentModel.DataAnnotations
@using ForYod.Model
@using Microsoft.EntityFrameworkCore
@inject AppDbContext DbContext
@inject ForYod.Components.Services.UserService UserService
@inject NavigationManager Navigation

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background: linear-gradient(45deg, #6a11cb 0%, #2575fc 100%);
    }

    .login-box {
        background-color: white;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        text-align: center;
        width: 300px;
    }

        .login-box h3 {
            margin-bottom: 1rem;
            font-size: 24px;
        }

        .login-box div {
            margin-bottom: 1rem;
        }

        .login-box label {
            display: block;
            margin-bottom: 0.5rem;
            text-align: left;
        }

        .login-box input {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

    .btn-login {
        background-color: #6a11cb;
        color: white;
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

        .btn-login:hover {
            background-color: #2575fc;
        }

    .login-box p {
        margin-top: 1rem;
    }

    .login-box a {
        color: #6a11cb;
        text-decoration: none;
    }

        .login-box a:hover {
            text-decoration: underline;
        }
</style>

<div class="login-container">
    <div class="login-box">
        @if (!string.IsNullOrEmpty(userName))
        {
            <div class="alert alert-primary" role="alert">
                שלום @userName
            </div>
        }

        <h3>התחברות</h3>

        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div>
                <label for="email">אימייל:</label>
                <InputText id="email" @bind-Value="loginModel.Email" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>
            <div>
                <label for="password">סיסמה:</label>
                <InputText id="password" @bind-Value="loginModel.Password" type="password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>
            <button type="submit" class="btn-login">התחבר</button>
        </EditForm>
        <p>
            <a href="/forgot-password">שכחת סיסמה?</a>
        </p>
        <p>
            לא רשום? <a href="/register">הרשמה</a>
        </p>

        @if (!string.IsNullOrEmpty(loginSuccess))
        {
            <div class="alert alert-success" role="alert">
                @loginSuccess
            </div>
        }

        @if (isModalVisible)
        {
            <div class="modal show d-block" tabindex="-1" role="dialog">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Login Error</h5>
                            <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <p>@loginError</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop fade show"></div>
        }
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string loginError;
    private string loginSuccess;
    private string userName;
    private bool isModalVisible;

    private async Task HandleLogin()
    {
        try
        {
            var trimmedEmail = loginModel.Email.Trim();
            var trimmedPassword = loginModel.Password.Trim();

            var user = await DbContext.Users.FirstOrDefaultAsync(u => u.Email == trimmedEmail && u.Password == trimmedPassword);
            if (user != null)
            {
                // Logic for successful login
                loginError = null;
                loginSuccess = "Login successful!";
                userName = user.FullName; // Assign the user's name to userName
                UserService.SetFullName(user.FullName); // Update the FullName in the service
                isModalVisible = false;
                StateHasChanged(); // Force UI to update

                // Redirect to home page after successful login
                Navigation.NavigateTo("/");
            }
            else
            {
                loginError = "Invalid email or password.";
                ShowErrorModal();
            }
        }
        catch (Exception ex)
        {
            loginError = $"An error occurred: {ex.Message}";
            ShowErrorModal();
        }
    }

    private void ShowErrorModal()
    {
        isModalVisible = true;
        StateHasChanged(); // Force UI to update
    }

    private void CloseModal()
    {
        isModalVisible = false;
        StateHasChanged(); // Force UI to update
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "חובה להכניס אימייל")]
        [EmailAddress(ErrorMessage = "אימייל לא תקין")]
        public string Email { get; set; }

        [Required(ErrorMessage = "חובה להכניס סיסמה")]
        public string Password { get; set; }
    }
}
