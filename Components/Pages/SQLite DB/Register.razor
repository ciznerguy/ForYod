@page "/register"
@using System.ComponentModel.DataAnnotations
@using ForYod.Model
@using Microsoft.EntityFrameworkCore
@inject AppDbContext DbContext

<style>
    .register-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background: linear-gradient(45deg, #6a11cb 0%, #2575fc 100%);
    }

    .register-box {
        background-color: white;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        text-align: center;
        width: 300px;
    }

        .register-box h3 {
            margin-bottom: 1rem;
            font-size: 24px;
        }

        .register-box div {
            margin-bottom: 1rem;
        }

        .register-box label {
            display: block;
            margin-bottom: 0.5rem;
            text-align: left;
        }

        .register-box input {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

    .btn-register {
        background-color: #6a11cb;
        color: white;
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

        .btn-register:hover {
            background-color: #2575fc;
        }

    .register-box p {
        margin-top: 1rem;
    }

    .register-box a {
        color: #6a11cb;
        text-decoration: none;
    }

        .register-box a:hover {
            text-decoration: underline;
        }

    .alert {
        margin-top: 1rem;
        padding: 0.75rem 1.25rem;
        border: 1px solid transparent;
        border-radius: 0.25rem;
    }

    .alert-success {
        color: #155724;
        background-color: #d4edda;
        border-color: #c3e6cb;
    }

    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1040;
    }

    .modal.show {
        display: block;
    }

    .modal-dialog {
        margin: 1.75rem auto;
        max-width: 500px;
    }

    .modal-content {
        border: 1px solid #dee2e6;
        border-radius: 0.3rem;
        background-color: #fff;
        box-shadow: 0 3px 9px rgba(0, 0, 0, 0.5);
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        border-bottom: 1px solid #dee2e6;
    }

    .modal-title {
        margin-bottom: 0;
        line-height: 1.5;
    }

    .modal-body {
        position: relative;
        padding: 1rem;
    }

    .modal-footer {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        padding: 1rem;
        border-top: 1px solid #dee2e6;
    }
</style>

<div class="register-container">
    <div class="register-box">
        <h3>הרשמה</h3>

        <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />
           

            <div>
                <label for="fullName">שם מלא:</label>
                <InputText id="fullName" @bind-Value="registerModel.FullName" />
                <ValidationMessage For="@(() => registerModel.FullName)" />
            </div>
            <div>
                <label for="email">אימייל:</label>
                <InputText id="email" @bind-Value="registerModel.Email" />
                <ValidationMessage For="@(() => registerModel.Email)" />
            </div>
            <div>
                <label for="password">סיסמה:</label>
                <InputText id="password" @bind-Value="registerModel.Password" type="password" />
                <ValidationMessage For="@(() => registerModel.Password)" />
            </div>
            <button type="submit" class="btn-register">הירשם</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(registerSuccess))
        {
            <div class="alert alert-success" role="alert">
                @registerSuccess
            </div>
        }

        @if (isModalVisible)
        {
            <div class="modal show d-block" tabindex="-1" role="dialog">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">שגיאה בהרשמה</h5>
                            <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <p>@registerError</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">סגור</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop fade show"></div>
        }
    </div>
</div>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string registerError;
    private string registerSuccess;
    private bool isModalVisible;

    private async Task HandleRegister()
    {
        try
        {
            var newUser = new User
                {
                    FullName = registerModel.FullName.Trim(),
                    Email = registerModel.Email.Trim(),
                    Password = registerModel.Password.Trim()
                };

            DbContext.Users.Add(newUser);
            await DbContext.SaveChangesAsync();

            registerError = null;
            registerSuccess = "ההרשמה הצליחה!";
            StateHasChanged(); // Force UI to update
        }
        catch (Exception ex)
        {
            registerError = $"אירעה שגיאה: {ex.Message}";
            ShowErrorModal();
        }
    }

    private void ShowErrorModal()
    {
        isModalVisible = true;
        StateHasChanged(); // Force UI to update
    }

    private void CloseModal()
    {
        isModalVisible = false;
        StateHasChanged(); // Force UI to update
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "חובה להכניס שם מלא")]
        public string FullName { get; set; }

        [Required(ErrorMessage = "חובה להכניס אימייל")]
        [EmailAddress(ErrorMessage = "אימייל לא תקין")]
        public string Email { get; set; }

        [Required(ErrorMessage = "חובה להכניס סיסמה")]
        public string Password { get; set; }
    }
}
